@page "/Housing/Ads/Detailed"
@using HomeStreetInvest.Model;
@using Homsin.Service;

@inject AuthenticationService AuthenticationService
@inject NavigationManager NavigationManager
@inject MessageDataService MessageDataService
@inject AdDataService AdDataService

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                <a class="nav-link" href="/Housing/Library">Library</a>
                </li>
                <li class="nav-item">
                <a class="nav-link" href="/Housing/Estimations">Estimate</a>
                </li>
                <li class="nav-item active">
                <a class="nav-link active" href="/Housing/Ads">Sell</a>
                </li>
                <li class="nav-item">
                <a class="nav-link" href="/Housing/More">More</a>
                </li>
            </ul>
        </div>
</nav>

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="container-fluid" style="background-color:#BB6B00; padding-top:20px; padding-bottom:20px;">
        <div class="row">
            <div class="col-sm-10">
                @_errorMessage
            </div>
            <div class="col-sm-2">
            </div>
        </div>
    </div>
    <br />
    <br />
}

<div class="container-fluid">
    <div class="row">
        <div class="form-group">
            <label for="heading">Heading</label>
            <input type="text" @bind="heading" class="form-control" id="heading">
        </div>
    </div>

    <br />

    <div class="row">
        <div class="form-group">
            <label for="content">Content</label>
            <textarea class="form-control" @bind="content" id="content" rows="6"></textarea>
        </div>
    </div>

    <br />

    <div class="row">
        <div class="form-group">
            <label for="Description">Description</label>
            <input type="text" class="form-control" @bind="description" id="Description">
        </div>
    </div>

    <br />

</div>


<div class="container-fluid" style="background-color:#4C86A8;
    padding-top:20px;
    padding-bottom:20px;
    position: fixed;
    bottom: 0;
    width: 100%;">
    <div class="row">
        @if (_myAd)
        {
            <div class="col-sm-10">
                @*Dont Allow to edit Ads*@
                &nbsp; <button @onclick="SubmitAd" type="button" class="btn btn-outline-info"><img width="24" height="24" src="https://img.icons8.com/fluency/48/create-new.png" />&nbsp; Edit Ad</button>
                &nbsp; <button @onclick="DeleteAd" type="button" class="btn btn-outline-info"><img width="24" height="24" src="https://img.icons8.com/fluency/48/create-new.png" />&nbsp; Delete Ad</button>
            </div>
            <div class="col-sm-2">
            </div>
        }
        else
        {
            <div class="col-sm-10">
                Message user username... &nbsp; <button @onclick="MessageUser" type="button" class="btn btn-outline-info"><img width="24" height="24" src="https://img.icons8.com/fluency/48/create-new.png" />&nbsp; Send Message</button>
            </div>
            <div class="col-sm-2">
            </div>
        }
    </div>
</div>


@code
{
    //Data for Ad
    private string heading { get; set; } = null!;
    private string content { get; set; } = null!;
    private string description { get; set; } = null!;

    private string _currency { get; set; } = "$"; //Default
    private string _errorMessage { get; set; }
    private bool _myAd { get; set; }

    private string uname { get; set; } = "a";
    List<Advertisment> ads { get; set; } = new();
    Advertisment CurrentAd { get; set; }
    private string CurrentAdID { get; set; }

    //MessageData
    private string Sender2 { get; set; }

    protected async override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        CurrentAdID = query["adID"];

        ads = await AdDataService.GetAsync();
        CurrentAd = ads.Find(ad => ad.AdID.ToString().Equals(CurrentAdID));

        //Up
        heading = CurrentAd.heading;
        content = CurrentAd.content;
        description = CurrentAd.description;

        if (CurrentAd.username == AuthenticationService.Username)
        {
            _myAd = true;
        }
        else
        {
            Sender2 = CurrentAd.username;
        }

        uname = AuthenticationService.Username + CurrentAd.username;
        StateHasChanged();
    }

    private async void DeleteAd()
    {
        try
        {
            await AdDataService.RemoveAsync(CurrentAd._id);
        }
        catch (Exception  ee)
        {
            _errorMessage = "Something went Wrong" + ee.Message;
        }
    }

    private async void SubmitAd()
    {
        CurrentAd.content = content;
        CurrentAd.heading = heading;
        CurrentAd.description = description;


        if (string.IsNullOrEmpty(CurrentAd.content) ||
             string.IsNullOrEmpty(CurrentAd.heading) ||
                string.IsNullOrEmpty(CurrentAd.username) ||
                     string.IsNullOrEmpty(CurrentAd.description))
        {
            _errorMessage = "Ohhhhh something is missing";
        }
        else
        {
            await AdDataService.UpdateAsync(CurrentAd._id, CurrentAd);
            //NavigationManager.NavigateTo("/Housing/Ads");
        }


        StateHasChanged();
    }

    private void MessageUser()
    {
        NavigationManager.NavigateTo($"/Messages?Sender={Sender2}&type=fromAd");
    }
}
