@page "/Housing/MyPost/Detailed"
@using HomeStreetInvest.Model;
@using Homsin.Service;

@inject NavigationManager NavigationManager
@inject FeedDataService FeedDataService
@inject AuthenticationService AuthenticationService


<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/Housing/Library">Library</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/Housing/Estimations">Estimate</a>
            </li>
            <li class="nav-item ">
                <a class="nav-link" href="/Housing/Ads">Sell</a>
            </li>
            <li class="nav-item active">
                <a class="nav-link active" href="/Housing/More">More</a>
            </li>
        </ul>
    </div>
</nav>

<br />
<br />

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="container-fluid" style="background-color:#BB6B00; padding-top:20px; padding-bottom:20px;">
        <div class="row">
            <div class="col-sm-10">
                @_errorMessage
            </div>
            <div class="col-sm-2">
            </div>
        </div>
    </div>
    <br />
    <br />
}


<div class="container-fluid">
    <div class="row">
        <div class="form-group">
            <label for="heading">Heading</label>
            <input type="text" class="form-control" @bind="heading" id="heading">
        </div>
    </div>

    <br />

    <div class="row">
        <div class="form-group">
            <label for="content">Content</label>
            <textarea class="form-control" id="content" rows="6" @bind="content"></textarea>
        </div>
    </div>

    <br />

    <div class="row">
        <div class="form-group">
            <label for="Description">Description</label>
            <input type="text" class="form-control" id="Description" @bind="description">
        </div>
    </div>

</div>
<br />
<br />
<br />
<br />
<br />
<br />
<br />

<h1>CurrFeID</h1>
<div class="container-fluid" style="background-color:#4C86A8; 
    padding-top:20px; 
    padding-bottom:20px;  
    position: fixed;
    bottom: 0;
    width: 100%;">

    <div class="row">
        @if (_myPost)
        {
            <div class="col-sm-10">
                <button @onclick="UpdatePost" type="button" class="btn btn-outline-info"><img width="24" height="24" src="https://img.icons8.com/fluency/48/create-new.png" />&nbsp; Edit Post</button>
                &nbsp; <button @onclick="DeletePost" type="button" class="btn btn-outline-info"><img width="24" height="24" src="https://img.icons8.com/fluency/48/create-new.png" />&nbsp; Delete Post</button>
            </div>
            <div class="col-sm-2">
            </div>
        }
        else
        {
            <div class="col-sm-10">
                Message user username... &nbsp; <button @onclick="UpdatePost" type="button" class="btn btn-outline-info"><img width="24" height="24" src="https://img.icons8.com/fluency/48/create-new.png" />&nbsp; Send Message</button>
            </div>
            <div class="col-sm-2">
            </div>
        }

    </div>
</div>

@code 
{
    private string _currency { get; set; } = "$"; //Default
    private string _errorMessage { get; set; }
    private bool _myPost { get; set; } = true;

    private string CurrFeID { get; set; }
    private List<Feed> feeds { get; set; }
    private Feed _Feed { get; set; }

    //Data for obj
    public string heading { get; set; } = null!;
    public string content { get; set; } = null!;
    public string description { get; set; } = null!;

    protected async override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        CurrFeID = query["FeID"];

        feeds = await FeedDataService.GetAsync();


        _Feed = feeds.Find(est => est._id.ToString().Equals(CurrFeID));

        //Up
        heading = _Feed.heading;
        content = _Feed.content;
        description = _Feed.description;

        if (_Feed.username == AuthenticationService.Username)
        {
            _myPost = true;
        }

        StateHasChanged();
    }


    private async void UpdatePost()
    {
        _Feed.description = description;
        _Feed.content = content;
        _Feed.heading = heading;

        try
        {
            await FeedDataService.UpdateAsync(_Feed._id, _Feed);
        }
        catch
        {
            _errorMessage = "Something Went Wrong!";
        }
    }

    private async void DeletePost()
    {
        try
        {
            await FeedDataService.RemoveAsync(_Feed._id);
        }
        catch
        {
            _errorMessage = "Something Went Wrong!";
        }
    }
}
