 @page "/Messages"
@using Homsin.Service;

@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService
@inject MessageDataService MessageDataService

<br/>

<div class="container-fluid">
    <div class="row">
        <div class="col-2">
            <div class="list-group" style="position: fixed;">
                @if (Senders.Any())
                {
                    foreach (var sender in Senders)
                    {
                        <a href="/Messages?Sender=Test2&type=main" class="list-group-item list-group-item-action">@sender</a>
                    }

                }
                else
                {
                    <p>Loading...</p>
                }

            </div>
        </div>
        <div class="col-1">
        </div>
        <div class="col-8">
            @if(!string.IsNullOrEmpty(sender1))
            {
               <ChatHead me="@sender2" sender="@sender1" type="@type"></ChatHead>
            }
        </div>
        <div class="col-1">
        </div>
    </div>
</div>

@code 
{
    private string sender1 { get; set; }
    private string sender2 { get; set; }
    private string type { get; set; }

    private List<HomeStreetInvest.Model.Chat> _RFChats { get; set; } = new();
    private List<string> Senders { get; set; } = new();

    protected async override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        sender2 = AuthenticationService.Username;
        sender1 = query["Sender"]; //Actually the reciver, sender in other pers
        type = query["type"];

        //First Check if a chathead between two exist

        _RFChats = await MessageDataService.GetAsync();
        Senders = _RFChats.Select(ch => ch.sender).Distinct().ToList();


        StateHasChanged();
    }


}
