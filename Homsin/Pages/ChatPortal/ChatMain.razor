 @page "/Messages"
@using Homsin.Service;

@inject NavigationManager NavigationManager
@inject AuthenticationService AuthenticationService
@inject MessageDataService MessageDataService

<br/>

<div class="container-fluid">
    <div class="row">
        <div class="col-2">
            <div class="list-group" style="position: fixed;">
                <a href="#" class="list-group-item list-group-item-action active">
                    Cras justo odio
                </a>
                <a href="#" class="list-group-item list-group-item-action">Dapibus</a>
                <a href="#" class="list-group-item list-group-item-action">Morbi</a>
                <a href="#" class="list-group-item list-group-item-action">HuMorbipasfa</a>
                <a href="#" class="list-group-item list-group-item-action disabled">Vestibulum</a>
            </div>
        </div>
        <div class="col-1">
        </div>
        <div class="col-8">
            @if(!string.IsNullOrEmpty(sender1))
            {
               <ChatHead me="@sender2" sender="sender1" type="@type"></ChatHead>
            }
        </div>
        <div class="col-1">
        </div>
    </div>
</div>

@code 
{
    private string sender1 { get; set; }
    private string sender2 { get; set; }
    private string type { get; set; }

    protected async override void OnInitialized()
    {
        var uri = new Uri(NavigationManager.Uri);
        var query = System.Web.HttpUtility.ParseQueryString(uri.Query);
        sender2 = AuthenticationService.Username;
        sender1 = query["Sender"]; //Actually the reciver, sender in other pers
        type = query["type"];

        //First Check if a chathead between two exist

        List<HomeStreetInvest.Model.ChatHead> chatHeads = await MessageDataService.GetAsync();

        StateHasChanged();
    }


}
