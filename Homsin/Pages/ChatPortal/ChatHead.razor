@using HomeStreetInvest.Model;
@using Homsin.Service;
@using MongoDB.Bson;
@inject AuthenticationService AuthenticationService
@inject MessageDataService MessageDataService
@inject NavigationManager NavigationManager

@if(_Chats.Any())
{
    @foreach (var chat in _Chats)
    {
        @if (chat.sender == sender)
        {
            <div class="card">
                <div class="card-header" style="text-align: right; background-color:#4C86A8; color:#EDE3E9;">
                    @me
                </div>
                <div class="card-body" style="text-align: right;">
                    <p class="card-text">@chat.chatMessage</p>
                </div>
            </div>

            <br />
            <br />
        }
        else
        {
            <div class="card">
                <div class="card-header" style="background-color:#BB6B00;color:#EDE3E9;">
                    @sender
                </div>
                <div class="card-body">
                    <p class="card-text">@chat.chatMessage</p>
                </div>
            </div>

            <br />
            <br />
        }
    }
}

<br />
<br />
<hr/>
<br/>

<div class="card">
    <div class="card-header" style="background-color:#BB6B00;color:#EDE3E9;">
        @me: New Message
    </div>
    <div class="card-body">
            <div class="form-group">
            <input type="text" @bind="_NewMessage" class="form-control" id="messagePrompt" placeholder="">
            </div>
            <br/>
        <button type="button" class="btn btn-outline-info" @onclick="SendMessage"> <img width="24" height="24" src="https://img.icons8.com/fluency/24/filled-sent.png" alt="filled-sent" /> </button>
    </div>
</div>

<br />
<br />


@code 
{
    [Parameter]
    public string me { get; set; }

    [Parameter]
    public string sender { get; set; }

    [Parameter]
    public string type { get; set; }

    private List<Chat> _Chats { get; set; } = new();

    private string _NewMessage { get; set; }
    private int _NewMessageindex { get; set; }

    private string _ErrorMessage { get; set; }

    private bool _isNewChatHead{ get; set; }
    private bool isMe1st { get; set; }

    private async void SendMessage()
    {
        Chat _NewChat = new();
        _NewChat.sender = sender;
        _NewChat.reciever = me;
        _NewChat.chatMessage = _NewMessage;
        _NewChat.chatindex = (await MessageDataService.GetAsync()).OrderBy(cht => cht.chatindex).First().chatindex + 1;
        _NewChat._id = ObjectId.GenerateNewId();
        await MessageDataService.CreateAsync(_NewChat);

        var _AllChats = await MessageDataService.GetAsync();

        _Chats.Clear();

        foreach (var chat in _AllChats)
        {
            if (chat.sender == me && chat.reciever == sender)
            {
                _Chats.Add(chat);
            }
            else if (chat.sender == sender && chat.reciever == me)
            {
                _Chats.Add(chat);
            }
        }

        StateHasChanged();
    }

    protected async override void OnInitialized()
    {
        var _AllChats= await MessageDataService.GetAsync();

        foreach(var chat in _AllChats)
        {
            if(chat.sender == me && chat.reciever == sender)
            {
                _Chats.Add(chat);
            }
            else if (chat.sender == sender && chat.reciever == me)
            {
                _Chats.Add(chat);
            }
        }
        StateHasChanged();
    }

}


